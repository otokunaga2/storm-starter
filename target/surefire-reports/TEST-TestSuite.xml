<?xml version="1.0" encoding="UTF-8" ?>
<testsuite tests="226" failures="0" name="TestSuite" time="0.977" errors="0" skipped="0">
  <properties>
    <property name="java.runtime.name" value="OpenJDK Runtime Environment"/>
    <property name="sun.boot.library.path" value="/usr/lib/jvm/java-8-openjdk/jre/lib/amd64"/>
    <property name="java.vm.version" value="25.25-b02"/>
    <property name="java.vm.vendor" value="Oracle Corporation"/>
    <property name="java.vendor.url" value="http://java.oracle.com/"/>
    <property name="path.separator" value=":"/>
    <property name="guice.disable.misplaced.annotation.check" value="true"/>
    <property name="java.vm.name" value="OpenJDK 64-Bit Server VM"/>
    <property name="file.encoding.pkg" value="sun.io"/>
    <property name="user.country" value="US"/>
    <property name="sun.java.launcher" value="SUN_STANDARD"/>
    <property name="sun.os.patch.level" value="unknown"/>
    <property name="java.vm.specification.name" value="Java Virtual Machine Specification"/>
    <property name="user.dir" value="/home/tokunaga/luna_workspace/storm-starter"/>
    <property name="java.runtime.version" value="1.8.0_25-b18"/>
    <property name="java.awt.graphicsenv" value="sun.awt.X11GraphicsEnvironment"/>
    <property name="java.endorsed.dirs" value="/usr/lib/jvm/java-8-openjdk/jre/lib/endorsed"/>
    <property name="os.arch" value="amd64"/>
    <property name="java.io.tmpdir" value="/tmp"/>
    <property name="line.separator" value="
"/>
    <property name="java.vm.specification.vendor" value="Oracle Corporation"/>
    <property name="os.name" value="Linux"/>
    <property name="classworlds.conf" value="/opt/maven/bin/m2.conf"/>
    <property name="sun.jnu.encoding" value="UTF-8"/>
    <property name="java.library.path" value="/usr/java/packages/lib/amd64:/usr/lib64:/lib64:/lib:/usr/lib"/>
    <property name="java.specification.name" value="Java Platform API Specification"/>
    <property name="java.class.version" value="52.0"/>
    <property name="sun.management.compiler" value="HotSpot 64-Bit Tiered Compilers"/>
    <property name="os.version" value="3.17.4-1-ARCH"/>
    <property name="user.home" value="/home/tokunaga"/>
    <property name="user.timezone" value="Asia/Tokyo"/>
    <property name="java.awt.printerjob" value="sun.print.PSPrinterJob"/>
    <property name="file.encoding" value="UTF-8"/>
    <property name="java.specification.version" value="1.8"/>
    <property name="user.name" value="tokunaga"/>
    <property name="java.class.path" value="/opt/maven/boot/plexus-classworlds-2.5.1.jar"/>
    <property name="java.vm.specification.version" value="1.8"/>
    <property name="sun.arch.data.model" value="64"/>
    <property name="java.home" value="/usr/lib/jvm/java-8-openjdk/jre"/>
    <property name="sun.java.command" value="org.codehaus.plexus.classworlds.launcher.Launcher -f m2-pom.xml package"/>
    <property name="java.specification.vendor" value="Oracle Corporation"/>
    <property name="user.language" value="en"/>
    <property name="awt.toolkit" value="sun.awt.X11.XToolkit"/>
    <property name="java.vm.info" value="mixed mode"/>
    <property name="java.version" value="1.8.0_25"/>
    <property name="java.ext.dirs" value="/usr/lib/jvm/java-8-openjdk/jre/lib/ext:/usr/java/packages/lib/ext"/>
    <property name="securerandom.source" value="file:/dev/./urandom"/>
    <property name="sun.boot.class.path" value="/usr/lib/jvm/java-8-openjdk/jre/lib/resources.jar:/usr/lib/jvm/java-8-openjdk/jre/lib/rt.jar:/usr/lib/jvm/java-8-openjdk/jre/lib/sunrsasign.jar:/usr/lib/jvm/java-8-openjdk/jre/lib/jsse.jar:/usr/lib/jvm/java-8-openjdk/jre/lib/jce.jar:/usr/lib/jvm/java-8-openjdk/jre/lib/charsets.jar:/usr/lib/jvm/java-8-openjdk/jre/lib/jfr.jar:/usr/lib/jvm/java-8-openjdk/jre/classes"/>
    <property name="java.vendor" value="Oracle Corporation"/>
    <property name="maven.home" value="/opt/maven"/>
    <property name="file.separator" value="/"/>
    <property name="java.vendor.url.bug" value="http://bugreport.sun.com/bugreport/"/>
    <property name="sun.cpu.endian" value="little"/>
    <property name="sun.io.unicode.encoding" value="UnicodeLittle"/>
    <property name="sun.cpu.isalist" value=""/>
  </properties>
  <testcase classname="storm.starter.bolt.IntermediateRankingsBoltTest" name="negativeOrZeroEmitFrequencyShouldThrowIAE" time="0.336"/>
  <testcase classname="storm.starter.bolt.IntermediateRankingsBoltTest" name="negativeOrZeroEmitFrequencyShouldThrowIAE" time="0.002"/>
  <testcase classname="storm.starter.bolt.IntermediateRankingsBoltTest" name="negativeOrZeroEmitFrequencyShouldThrowIAE" time="0.004"/>
  <testcase classname="storm.starter.bolt.IntermediateRankingsBoltTest" name="negativeOrZeroEmitFrequencyShouldThrowIAE" time="0"/>
  <testcase classname="storm.starter.bolt.IntermediateRankingsBoltTest" name="negativeOrZeroEmitFrequencyShouldThrowIAE" time="0"/>
  <testcase classname="storm.starter.bolt.IntermediateRankingsBoltTest" name="negativeOrZeroTopNShouldThrowIAE" time="0.003"/>
  <testcase classname="storm.starter.bolt.IntermediateRankingsBoltTest" name="negativeOrZeroTopNShouldThrowIAE" time="0"/>
  <testcase classname="storm.starter.bolt.IntermediateRankingsBoltTest" name="negativeOrZeroTopNShouldThrowIAE" time="0"/>
  <testcase classname="storm.starter.bolt.IntermediateRankingsBoltTest" name="negativeOrZeroTopNShouldThrowIAE" time="0.001"/>
  <testcase classname="storm.starter.bolt.IntermediateRankingsBoltTest" name="negativeOrZeroTopNShouldThrowIAE" time="0"/>
  <testcase classname="storm.starter.bolt.IntermediateRankingsBoltTest" name="positiveEmitFrequencyShouldBeOk" time="0.003"/>
  <testcase classname="storm.starter.bolt.IntermediateRankingsBoltTest" name="positiveEmitFrequencyShouldBeOk" time="0.001"/>
  <testcase classname="storm.starter.bolt.IntermediateRankingsBoltTest" name="positiveEmitFrequencyShouldBeOk" time="0"/>
  <testcase classname="storm.starter.bolt.IntermediateRankingsBoltTest" name="positiveEmitFrequencyShouldBeOk" time="0.001"/>
  <testcase classname="storm.starter.bolt.IntermediateRankingsBoltTest" name="positiveTopNShouldBeOk" time="0.001"/>
  <testcase classname="storm.starter.bolt.IntermediateRankingsBoltTest" name="positiveTopNShouldBeOk" time="0"/>
  <testcase classname="storm.starter.bolt.IntermediateRankingsBoltTest" name="positiveTopNShouldBeOk" time="0"/>
  <testcase classname="storm.starter.bolt.IntermediateRankingsBoltTest" name="positiveTopNShouldBeOk" time="0.001"/>
  <testcase classname="storm.starter.bolt.IntermediateRankingsBoltTest" name="shouldDeclareOutputFields" time="0.179"/>
  <testcase classname="storm.starter.bolt.IntermediateRankingsBoltTest" name="shouldEmitNothingIfNormalTupleIsReceived" time="0.043"/>
  <testcase classname="storm.starter.bolt.IntermediateRankingsBoltTest" name="shouldEmitSomethingIfTickTupleIsReceived" time="0.004"/>
  <testcase classname="storm.starter.bolt.IntermediateRankingsBoltTest" name="shouldSetTickTupleFrequencyInComponentConfigurationToNonZeroValue" time="0.014"/>
  <testcase classname="storm.starter.tools.NthLastModifiedTimeTrackerTest" name="negativeOrZeroNumTimesToTrackShouldThrowIAE" time="0.002"/>
  <testcase classname="storm.starter.tools.NthLastModifiedTimeTrackerTest" name="negativeOrZeroNumTimesToTrackShouldThrowIAE" time="0"/>
  <testcase classname="storm.starter.tools.NthLastModifiedTimeTrackerTest" name="negativeOrZeroNumTimesToTrackShouldThrowIAE" time="0.002"/>
  <testcase classname="storm.starter.tools.NthLastModifiedTimeTrackerTest" name="negativeOrZeroNumTimesToTrackShouldThrowIAE" time="0.002"/>
  <testcase classname="storm.starter.tools.NthLastModifiedTimeTrackerTest" name="negativeOrZeroNumTimesToTrackShouldThrowIAE" time="0"/>
  <testcase classname="storm.starter.tools.NthLastModifiedTimeTrackerTest" name="positiveNumTimesToTrackShouldBeOk" time="0.003"/>
  <testcase classname="storm.starter.tools.NthLastModifiedTimeTrackerTest" name="positiveNumTimesToTrackShouldBeOk" time="0"/>
  <testcase classname="storm.starter.tools.NthLastModifiedTimeTrackerTest" name="positiveNumTimesToTrackShouldBeOk" time="0"/>
  <testcase classname="storm.starter.tools.NthLastModifiedTimeTrackerTest" name="positiveNumTimesToTrackShouldBeOk" time="0"/>
  <testcase classname="storm.starter.tools.NthLastModifiedTimeTrackerTest" name="shouldReturnCorrectModifiedTimeEvenWhenNotYetMarkedAsModified" time="0.001"/>
  <testcase classname="storm.starter.tools.NthLastModifiedTimeTrackerTest" name="shouldReturnCorrectModifiedTimeEvenWhenNotYetMarkedAsModified" time="0"/>
  <testcase classname="storm.starter.tools.NthLastModifiedTimeTrackerTest" name="shouldReturnCorrectModifiedTimeEvenWhenNotYetMarkedAsModified" time="0.002"/>
  <testcase classname="storm.starter.tools.NthLastModifiedTimeTrackerTest" name="shouldReturnCorrectModifiedTimeEvenWhenNotYetMarkedAsModified" time="0.001"/>
  <testcase classname="storm.starter.tools.NthLastModifiedTimeTrackerTest" name="shouldReturnCorrectModifiedTimeEvenWhenNotYetMarkedAsModified" time="0"/>
  <testcase classname="storm.starter.tools.NthLastModifiedTimeTrackerTest" name="shouldReturnCorrectModifiedTimeEvenWhenNotYetMarkedAsModified" time="0"/>
  <testcase classname="storm.starter.tools.NthLastModifiedTimeTrackerTest" name="shouldReturnCorrectModifiedTimeEvenWhenNotYetMarkedAsModified" time="0"/>
  <testcase classname="storm.starter.tools.NthLastModifiedTimeTrackerTest" name="shouldReturnCorrectModifiedTimeEvenWhenNotYetMarkedAsModified" time="0"/>
  <testcase classname="storm.starter.tools.NthLastModifiedTimeTrackerTest" name="shouldReturnCorrectModifiedTimeWhenMarkedAsModified" time="0.003"/>
  <testcase classname="storm.starter.tools.NthLastModifiedTimeTrackerTest" name="shouldReturnCorrectModifiedTimeWhenMarkedAsModified" time="0"/>
  <testcase classname="storm.starter.tools.NthLastModifiedTimeTrackerTest" name="shouldReturnCorrectModifiedTimeWhenMarkedAsModified" time="0"/>
  <testcase classname="storm.starter.tools.NthLastModifiedTimeTrackerTest" name="shouldReturnCorrectModifiedTimeWhenMarkedAsModified" time="0"/>
  <testcase classname="storm.starter.tools.NthLastModifiedTimeTrackerTest" name="shouldReturnCorrectModifiedTimeWhenMarkedAsModified" time="0"/>
  <testcase classname="storm.starter.tools.NthLastModifiedTimeTrackerTest" name="shouldReturnCorrectModifiedTimeWhenMarkedAsModified" time="0"/>
  <testcase classname="storm.starter.tools.NthLastModifiedTimeTrackerTest" name="shouldReturnCorrectModifiedTimeWhenMarkedAsModified" time="0"/>
  <testcase classname="storm.starter.tools.NthLastModifiedTimeTrackerTest" name="shouldReturnCorrectModifiedTimeWhenMarkedAsModified" time="0"/>
  <testcase classname="storm.starter.tools.NthLastModifiedTimeTrackerTest" name="shouldReturnCorrectModifiedTimeWhenMarkedAsModified" time="0.001"/>
  <testcase classname="storm.starter.tools.NthLastModifiedTimeTrackerTest" name="shouldReturnCorrectModifiedTimeWhenMarkedAsModified" time="0"/>
  <testcase classname="storm.starter.tools.NthLastModifiedTimeTrackerTest" name="shouldReturnCorrectModifiedTimeWhenMarkedAsModified" time="0"/>
  <testcase classname="storm.starter.tools.NthLastModifiedTimeTrackerTest" name="shouldReturnCorrectModifiedTimeWhenMarkedAsModified" time="0"/>
  <testcase classname="storm.starter.tools.NthLastModifiedTimeTrackerTest" name="shouldReturnCorrectModifiedTimeWhenMarkedAsModified" time="0"/>
  <testcase classname="storm.starter.tools.NthLastModifiedTimeTrackerTest" name="shouldReturnCorrectModifiedTimeWhenMarkedAsModified" time="0"/>
  <testcase classname="storm.starter.tools.NthLastModifiedTimeTrackerTest" name="shouldReturnCorrectModifiedTimeWhenMarkedAsModified" time="0"/>
  <testcase classname="storm.starter.tools.NthLastModifiedTimeTrackerTest" name="shouldReturnCorrectModifiedTimeWhenMarkedAsModified" time="0.001"/>
  <testcase classname="storm.starter.tools.NthLastModifiedTimeTrackerTest" name="shouldReturnCorrectModifiedTimeWhenMarkedAsModified" time="0"/>
  <testcase classname="storm.starter.tools.NthLastModifiedTimeTrackerTest" name="shouldReturnCorrectModifiedTimeWhenMarkedAsModified" time="0.001"/>
  <testcase classname="storm.starter.tools.NthLastModifiedTimeTrackerTest" name="shouldReturnCorrectModifiedTimeWhenMarkedAsModified" time="0"/>
  <testcase classname="storm.starter.tools.NthLastModifiedTimeTrackerTest" name="shouldReturnCorrectModifiedTimeWhenMarkedAsModified" time="0.001"/>
  <testcase classname="storm.starter.tools.NthLastModifiedTimeTrackerTest" name="shouldReturnCorrectModifiedTimeWhenMarkedAsModified" time="0"/>
  <testcase classname="storm.starter.tools.NthLastModifiedTimeTrackerTest" name="shouldReturnCorrectModifiedTimeWhenMarkedAsModified" time="0.001"/>
  <testcase classname="storm.starter.tools.RankableObjectWithFieldsTest" name="constructorWithNegativeCountAndFieldsShouldThrowIAE" time="0"/>
  <testcase classname="storm.starter.tools.RankableObjectWithFieldsTest" name="constructorWithNegativeCountAndNoFieldsShouldThrowIAE" time="0.001"/>
  <testcase classname="storm.starter.tools.RankableObjectWithFieldsTest" name="constructorWithNullObjectAndFieldsShouldThrowIAE" time="0"/>
  <testcase classname="storm.starter.tools.RankableObjectWithFieldsTest" name="constructorWithNullObjectAndNoFieldsShouldThrowIAE" time="0.001"/>
  <testcase classname="storm.starter.tools.RankableObjectWithFieldsTest" name="copyShouldReturnCopy" time="0.001"/>
  <testcase classname="storm.starter.tools.RankableObjectWithFieldsTest" name="copyShouldReturnCopy" time="0.001"/>
  <testcase classname="storm.starter.tools.RankableObjectWithFieldsTest" name="copyShouldReturnCopy" time="0"/>
  <testcase classname="storm.starter.tools.RankableObjectWithFieldsTest" name="fieldsShouldBeImmutable" time="0"/>
  <testcase classname="storm.starter.tools.RankableObjectWithFieldsTest" name="shouldBeEqualToItself" time="0"/>
  <testcase classname="storm.starter.tools.RankableObjectWithFieldsTest" name="shouldBeEqualToTrueDuplicates" time="0.005"/>
  <testcase classname="storm.starter.tools.RankableObjectWithFieldsTest" name="shouldBeEqualToTrueDuplicates" time="0.001"/>
  <testcase classname="storm.starter.tools.RankableObjectWithFieldsTest" name="shouldBeEqualToTrueDuplicates" time="0"/>
  <testcase classname="storm.starter.tools.RankableObjectWithFieldsTest" name="shouldCreateRankableObjectFromTuple" time="0.005"/>
  <testcase classname="storm.starter.tools.RankableObjectWithFieldsTest" name="shouldHaveDifferentHashCodeThanFalseDuplicates" time="0"/>
  <testcase classname="storm.starter.tools.RankableObjectWithFieldsTest" name="shouldHaveDifferentHashCodeThanFalseDuplicates" time="0.001"/>
  <testcase classname="storm.starter.tools.RankableObjectWithFieldsTest" name="shouldHaveDifferentHashCodeThanFalseDuplicates" time="0"/>
  <testcase classname="storm.starter.tools.RankableObjectWithFieldsTest" name="shouldHaveDifferentHashCodeThanFalseDuplicates" time="0"/>
  <testcase classname="storm.starter.tools.RankableObjectWithFieldsTest" name="shouldHaveDifferentHashCodeThanFalseDuplicates" time="0"/>
  <testcase classname="storm.starter.tools.RankableObjectWithFieldsTest" name="shouldHaveDifferentHashCodeThanFalseDuplicates" time="0.001"/>
  <testcase classname="storm.starter.tools.RankableObjectWithFieldsTest" name="shouldHaveSameHashCodeAsTrueDuplicates" time="0"/>
  <testcase classname="storm.starter.tools.RankableObjectWithFieldsTest" name="shouldHaveSameHashCodeAsTrueDuplicates" time="0.016"/>
  <testcase classname="storm.starter.tools.RankableObjectWithFieldsTest" name="shouldHaveSameHashCodeAsTrueDuplicates" time="0"/>
  <testcase classname="storm.starter.tools.RankableObjectWithFieldsTest" name="shouldNotBeEqualToFalseDuplicates" time="0"/>
  <testcase classname="storm.starter.tools.RankableObjectWithFieldsTest" name="shouldNotBeEqualToFalseDuplicates" time="0"/>
  <testcase classname="storm.starter.tools.RankableObjectWithFieldsTest" name="shouldNotBeEqualToFalseDuplicates" time="0.006"/>
  <testcase classname="storm.starter.tools.RankableObjectWithFieldsTest" name="shouldNotBeEqualToFalseDuplicates" time="0"/>
  <testcase classname="storm.starter.tools.RankableObjectWithFieldsTest" name="shouldNotBeEqualToFalseDuplicates" time="0"/>
  <testcase classname="storm.starter.tools.RankableObjectWithFieldsTest" name="shouldNotBeEqualToFalseDuplicates" time="0"/>
  <testcase classname="storm.starter.tools.RankableObjectWithFieldsTest" name="shouldNotBeEqualToInstancesOfOtherClasses" time="0"/>
  <testcase classname="storm.starter.tools.RankableObjectWithFieldsTest" name="shouldNotBeEqualToInstancesOfOtherClasses" time="0"/>
  <testcase classname="storm.starter.tools.RankableObjectWithFieldsTest" name="shouldNotBeEqualToInstancesOfOtherClasses" time="0"/>
  <testcase classname="storm.starter.tools.RankableObjectWithFieldsTest" name="shouldNotBeEqualToInstancesOfOtherClasses" time="0"/>
  <testcase classname="storm.starter.tools.RankableObjectWithFieldsTest" name="shouldReturnTheCount" time="0.001"/>
  <testcase classname="storm.starter.tools.RankableObjectWithFieldsTest" name="shouldReturnTheFields" time="0.004"/>
  <testcase classname="storm.starter.tools.RankableObjectWithFieldsTest" name="shouldReturnTheFields" time="0"/>
  <testcase classname="storm.starter.tools.RankableObjectWithFieldsTest" name="shouldReturnTheObject" time="0"/>
  <testcase classname="storm.starter.tools.RankableObjectWithFieldsTest" name="toStringShouldContainStringRepresentationsOfObjectAndCount" time="0.003"/>
  <testcase classname="storm.starter.tools.RankableObjectWithFieldsTest" name="toStringShouldContainStringRepresentationsOfObjectAndCount" time="0.003"/>
  <testcase classname="storm.starter.tools.RankableObjectWithFieldsTest" name="verifyCompareTo" time="0.002"/>
  <testcase classname="storm.starter.tools.RankableObjectWithFieldsTest" name="verifyCompareTo" time="0.001"/>
  <testcase classname="storm.starter.tools.RankableObjectWithFieldsTest" name="verifyCompareTo" time="0"/>
  <testcase classname="storm.starter.tools.RankableObjectWithFieldsTest" name="verifyCompareTo" time="0"/>
  <testcase classname="storm.starter.tools.RankableObjectWithFieldsTest" name="verifyCompareTo" time="0.002"/>
  <testcase classname="storm.starter.tools.RankableObjectWithFieldsTest" name="verifyCompareTo" time="0"/>
  <testcase classname="storm.starter.tools.RankableObjectWithFieldsTest" name="verifyCompareTo" time="0"/>
  <testcase classname="storm.starter.tools.RankableObjectWithFieldsTest" name="verifyCompareTo" time="0"/>
  <testcase classname="storm.starter.tools.RankableObjectWithFieldsTest" name="verifyCompareTo" time="0"/>
  <testcase classname="storm.starter.tools.RankableObjectWithFieldsTest" name="verifyCompareTo" time="0"/>
  <testcase classname="storm.starter.tools.RankingsTest" name="constructorWithNegativeOrZeroTopNShouldThrowIAE" time="0.002"/>
  <testcase classname="storm.starter.tools.RankingsTest" name="constructorWithNegativeOrZeroTopNShouldThrowIAE" time="0"/>
  <testcase classname="storm.starter.tools.RankingsTest" name="constructorWithNegativeOrZeroTopNShouldThrowIAE" time="0"/>
  <testcase classname="storm.starter.tools.RankingsTest" name="constructorWithNegativeOrZeroTopNShouldThrowIAE" time="0"/>
  <testcase classname="storm.starter.tools.RankingsTest" name="constructorWithPositiveTopNShouldBeOk" time="0.003"/>
  <testcase classname="storm.starter.tools.RankingsTest" name="constructorWithPositiveTopNShouldBeOk" time="0"/>
  <testcase classname="storm.starter.tools.RankingsTest" name="constructorWithPositiveTopNShouldBeOk" time="0"/>
  <testcase classname="storm.starter.tools.RankingsTest" name="constructorWithPositiveTopNShouldBeOk" time="0"/>
  <testcase classname="storm.starter.tools.RankingsTest" name="copyConstructorShouldReturnCopy" time="0.001"/>
  <testcase classname="storm.starter.tools.RankingsTest" name="copyConstructorShouldReturnCopy" time="0"/>
  <testcase classname="storm.starter.tools.RankingsTest" name="copyConstructorShouldReturnCopy" time="0.001"/>
  <testcase classname="storm.starter.tools.RankingsTest" name="copyConstructorShouldReturnCopy" time="0.001"/>
  <testcase classname="storm.starter.tools.RankingsTest" name="copyConstructorShouldReturnCopy" time="0.001"/>
  <testcase classname="storm.starter.tools.RankingsTest" name="copyConstructorShouldReturnDefensiveCopy" time="0.001"/>
  <testcase classname="storm.starter.tools.RankingsTest" name="copyConstructorShouldReturnDefensiveCopy" time="0.003"/>
  <testcase classname="storm.starter.tools.RankingsTest" name="copyConstructorShouldReturnDefensiveCopy" time="0"/>
  <testcase classname="storm.starter.tools.RankingsTest" name="copyConstructorShouldReturnDefensiveCopy" time="0"/>
  <testcase classname="storm.starter.tools.RankingsTest" name="copyConstructorShouldReturnDefensiveCopy" time="0.001"/>
  <testcase classname="storm.starter.tools.RankingsTest" name="copyConstructorShouldReturnDefensiveCopy" time="0.001"/>
  <testcase classname="storm.starter.tools.RankingsTest" name="copyShouldReturnCopy" time="0.005"/>
  <testcase classname="storm.starter.tools.RankingsTest" name="copyShouldReturnCopy" time="0"/>
  <testcase classname="storm.starter.tools.RankingsTest" name="copyShouldReturnCopy" time="0"/>
  <testcase classname="storm.starter.tools.RankingsTest" name="copyShouldReturnCopy" time="0"/>
  <testcase classname="storm.starter.tools.RankingsTest" name="copyShouldReturnCopy" time="0.001"/>
  <testcase classname="storm.starter.tools.RankingsTest" name="copyShouldReturnDefensiveCopy" time="0"/>
  <testcase classname="storm.starter.tools.RankingsTest" name="copyShouldReturnDefensiveCopy" time="0.001"/>
  <testcase classname="storm.starter.tools.RankingsTest" name="copyShouldReturnDefensiveCopy" time="0"/>
  <testcase classname="storm.starter.tools.RankingsTest" name="copyShouldReturnDefensiveCopy" time="0"/>
  <testcase classname="storm.starter.tools.RankingsTest" name="copyShouldReturnDefensiveCopy" time="0"/>
  <testcase classname="storm.starter.tools.RankingsTest" name="copyShouldReturnDefensiveCopy" time="0"/>
  <testcase classname="storm.starter.tools.RankingsTest" name="defaultConstructorShouldSetPositiveTopN" time="0"/>
  <testcase classname="storm.starter.tools.RankingsTest" name="shouldCorrectlyRankWhenEmptyAndUpdatedWithOtherRankings" time="0.004"/>
  <testcase classname="storm.starter.tools.RankingsTest" name="shouldCorrectlyRankWhenEmptyAndUpdatedWithOtherRankings" time="0"/>
  <testcase classname="storm.starter.tools.RankingsTest" name="shouldCorrectlyRankWhenEmptyAndUpdatedWithOtherRankings" time="0"/>
  <testcase classname="storm.starter.tools.RankingsTest" name="shouldCorrectlyRankWhenEmptyAndUpdatedWithOtherRankings" time="0"/>
  <testcase classname="storm.starter.tools.RankingsTest" name="shouldCorrectlyRankWhenNotEmptyAndUpdatedWithOtherRankings" time="0"/>
  <testcase classname="storm.starter.tools.RankingsTest" name="shouldCorrectlyRankWhenNotEmptyAndUpdatedWithOtherRankings" time="0"/>
  <testcase classname="storm.starter.tools.RankingsTest" name="shouldCorrectlyRankWhenNotEmptyAndUpdatedWithOtherRankings" time="0"/>
  <testcase classname="storm.starter.tools.RankingsTest" name="shouldCorrectlyRankWhenNotEmptyAndUpdatedWithOtherRankings" time="0.001"/>
  <testcase classname="storm.starter.tools.RankingsTest" name="shouldCorrectlyRankWhenUpdatedWithEmptyOtherRankings" time="0.002"/>
  <testcase classname="storm.starter.tools.RankingsTest" name="shouldCorrectlyRankWhenUpdatedWithEmptyOtherRankings" time="0"/>
  <testcase classname="storm.starter.tools.RankingsTest" name="shouldCorrectlyRankWhenUpdatedWithEmptyOtherRankings" time="0.001"/>
  <testcase classname="storm.starter.tools.RankingsTest" name="shouldCorrectlyRankWhenUpdatedWithEmptyOtherRankings" time="0.001"/>
  <testcase classname="storm.starter.tools.RankingsTest" name="shouldCorrectlyRankWhenUpdatedWithRankables" time="0.003"/>
  <testcase classname="storm.starter.tools.RankingsTest" name="shouldCorrectlyRankWhenUpdatedWithRankables" time="0"/>
  <testcase classname="storm.starter.tools.RankingsTest" name="shouldCorrectlyRankWhenUpdatedWithRankables" time="0.001"/>
  <testcase classname="storm.starter.tools.RankingsTest" name="shouldCorrectlyRankWhenUpdatedWithRankables" time="0"/>
  <testcase classname="storm.starter.tools.RankingsTest" name="shouldHaveDefaultConstructor" time="0.004"/>
  <testcase classname="storm.starter.tools.RankingsTest" name="shouldNotRankDuplicateObjectsMoreThanOnce" time="0.003"/>
  <testcase classname="storm.starter.tools.RankingsTest" name="shouldNotRankDuplicateObjectsMoreThanOnce" time="0"/>
  <testcase classname="storm.starter.tools.RankingsTest" name="shouldRemoveZeroCounts" time="0"/>
  <testcase classname="storm.starter.tools.RankingsTest" name="shouldRemoveZeroCounts" time="0"/>
  <testcase classname="storm.starter.tools.RankingsTest" name="shouldRemoveZeroCounts" time="0.001"/>
  <testcase classname="storm.starter.tools.RankingsTest" name="shouldRemoveZeroCounts" time="0"/>
  <testcase classname="storm.starter.tools.RankingsTest" name="shouldRemoveZeroCounts" time="0.004"/>
  <testcase classname="storm.starter.tools.RankingsTest" name="shouldRemoveZeroCounts" time="0.001"/>
  <testcase classname="storm.starter.tools.RankingsTest" name="shouldRemoveZeroCounts" time="0.006"/>
  <testcase classname="storm.starter.tools.RankingsTest" name="sizeOfRankingsShouldNotGrowBeyondTopN" time="0.006"/>
  <testcase classname="storm.starter.tools.RankingsTest" name="sizeOfRankingsShouldNotGrowBeyondTopN" time="0.001"/>
  <testcase classname="storm.starter.tools.RankingsTest" name="updatingWithNewRankablesShouldBeThreadSafe" time="0.09"/>
  <testcase classname="storm.starter.bolt.RollingCountBoltTest" name="shouldDeclareOutputFields" time="0.001"/>
  <testcase classname="storm.starter.bolt.RollingCountBoltTest" name="shouldEmitNothingIfNoObjectHasBeenCountedYetAndTickTupleIsReceived" time="0.098"/>
  <testcase classname="storm.starter.bolt.RollingCountBoltTest" name="shouldEmitSomethingIfAtLeastOneObjectWasCountedAndTickTupleIsReceived" time="0.005"/>
  <testcase classname="storm.starter.bolt.RollingCountBoltTest" name="shouldSetTickTupleFrequencyInComponentConfigurationToNonZeroValue" time="0"/>
  <testcase classname="storm.starter.tools.SlidingWindowCounterTest" name="lessThanTwoSlotsShouldThrowIAE" time="0"/>
  <testcase classname="storm.starter.tools.SlidingWindowCounterTest" name="lessThanTwoSlotsShouldThrowIAE" time="0"/>
  <testcase classname="storm.starter.tools.SlidingWindowCounterTest" name="lessThanTwoSlotsShouldThrowIAE" time="0"/>
  <testcase classname="storm.starter.tools.SlidingWindowCounterTest" name="lessThanTwoSlotsShouldThrowIAE" time="0"/>
  <testcase classname="storm.starter.tools.SlidingWindowCounterTest" name="lessThanTwoSlotsShouldThrowIAE" time="0.002"/>
  <testcase classname="storm.starter.tools.SlidingWindowCounterTest" name="lessThanTwoSlotsShouldThrowIAE" time="0"/>
  <testcase classname="storm.starter.tools.SlidingWindowCounterTest" name="newInstanceShouldHaveEmptyCounts" time="0.002"/>
  <testcase classname="storm.starter.tools.SlidingWindowCounterTest" name="testCounterWithSimulatedRuns" time="0.005"/>
  <testcase classname="storm.starter.tools.SlidingWindowCounterTest" name="testCounterWithSimulatedRuns" time="0"/>
  <testcase classname="storm.starter.tools.SlidingWindowCounterTest" name="testCounterWithSimulatedRuns" time="0"/>
  <testcase classname="storm.starter.tools.SlidingWindowCounterTest" name="testCounterWithSimulatedRuns" time="0.004"/>
  <testcase classname="storm.starter.tools.SlidingWindowCounterTest" name="testCounterWithSimulatedRuns" time="0.003"/>
  <testcase classname="storm.starter.tools.SlidingWindowCounterTest" name="twoOrMoreSlotsShouldBeValid" time="0.001"/>
  <testcase classname="storm.starter.tools.SlidingWindowCounterTest" name="twoOrMoreSlotsShouldBeValid" time="0"/>
  <testcase classname="storm.starter.tools.SlidingWindowCounterTest" name="twoOrMoreSlotsShouldBeValid" time="0.001"/>
  <testcase classname="storm.starter.tools.SlotBasedCounterTest" name="negativeOrZeroNumSlotsShouldThrowIAE" time="0"/>
  <testcase classname="storm.starter.tools.SlotBasedCounterTest" name="negativeOrZeroNumSlotsShouldThrowIAE" time="0"/>
  <testcase classname="storm.starter.tools.SlotBasedCounterTest" name="negativeOrZeroNumSlotsShouldThrowIAE" time="0.001"/>
  <testcase classname="storm.starter.tools.SlotBasedCounterTest" name="negativeOrZeroNumSlotsShouldThrowIAE" time="0.002"/>
  <testcase classname="storm.starter.tools.SlotBasedCounterTest" name="negativeOrZeroNumSlotsShouldThrowIAE" time="0.003"/>
  <testcase classname="storm.starter.tools.SlotBasedCounterTest" name="newInstanceShouldHaveEmptyCounts" time="0"/>
  <testcase classname="storm.starter.tools.SlotBasedCounterTest" name="positiveNumSlotsShouldBeOk" time="0"/>
  <testcase classname="storm.starter.tools.SlotBasedCounterTest" name="positiveNumSlotsShouldBeOk" time="0"/>
  <testcase classname="storm.starter.tools.SlotBasedCounterTest" name="positiveNumSlotsShouldBeOk" time="0"/>
  <testcase classname="storm.starter.tools.SlotBasedCounterTest" name="positiveNumSlotsShouldBeOk" time="0"/>
  <testcase classname="storm.starter.tools.SlotBasedCounterTest" name="shouldIncrementCount" time="0"/>
  <testcase classname="storm.starter.tools.SlotBasedCounterTest" name="shouldIncrementCountOnlyOneSlotAtATime" time="0"/>
  <testcase classname="storm.starter.tools.SlotBasedCounterTest" name="shouldReturnNonEmptyCountsWhenAtLeastOneObjectWasCounted" time="0"/>
  <testcase classname="storm.starter.tools.SlotBasedCounterTest" name="shouldReturnZeroForNonexistentObject" time="0.001"/>
  <testcase classname="storm.starter.tools.SlotBasedCounterTest" name="wipeSlotShouldSetAllCountsInSlotToZero" time="0.002"/>
  <testcase classname="storm.starter.tools.SlotBasedCounterTest" name="wipeZerosShouldRemoveAnyObjectsWithZeroTotalCount" time="0.001"/>
  <testcase classname="storm.starter.bolt.TotalRankingsBoltTest" name="negativeOrZeroEmitFrequencyShouldThrowIAE" time="0.003"/>
  <testcase classname="storm.starter.bolt.TotalRankingsBoltTest" name="negativeOrZeroEmitFrequencyShouldThrowIAE" time="0"/>
  <testcase classname="storm.starter.bolt.TotalRankingsBoltTest" name="negativeOrZeroEmitFrequencyShouldThrowIAE" time="0"/>
  <testcase classname="storm.starter.bolt.TotalRankingsBoltTest" name="negativeOrZeroEmitFrequencyShouldThrowIAE" time="0"/>
  <testcase classname="storm.starter.bolt.TotalRankingsBoltTest" name="negativeOrZeroEmitFrequencyShouldThrowIAE" time="0.002"/>
  <testcase classname="storm.starter.bolt.TotalRankingsBoltTest" name="negativeOrZeroTopNShouldThrowIAE" time="0.001"/>
  <testcase classname="storm.starter.bolt.TotalRankingsBoltTest" name="negativeOrZeroTopNShouldThrowIAE" time="0"/>
  <testcase classname="storm.starter.bolt.TotalRankingsBoltTest" name="negativeOrZeroTopNShouldThrowIAE" time="0"/>
  <testcase classname="storm.starter.bolt.TotalRankingsBoltTest" name="negativeOrZeroTopNShouldThrowIAE" time="0"/>
  <testcase classname="storm.starter.bolt.TotalRankingsBoltTest" name="negativeOrZeroTopNShouldThrowIAE" time="0"/>
  <testcase classname="storm.starter.bolt.TotalRankingsBoltTest" name="positiveEmitFrequencyShouldBeOk" time="0"/>
  <testcase classname="storm.starter.bolt.TotalRankingsBoltTest" name="positiveEmitFrequencyShouldBeOk" time="0"/>
  <testcase classname="storm.starter.bolt.TotalRankingsBoltTest" name="positiveEmitFrequencyShouldBeOk" time="0.001"/>
  <testcase classname="storm.starter.bolt.TotalRankingsBoltTest" name="positiveEmitFrequencyShouldBeOk" time="0"/>
  <testcase classname="storm.starter.bolt.TotalRankingsBoltTest" name="positiveTopNShouldBeOk" time="0.004"/>
  <testcase classname="storm.starter.bolt.TotalRankingsBoltTest" name="positiveTopNShouldBeOk" time="0.001"/>
  <testcase classname="storm.starter.bolt.TotalRankingsBoltTest" name="positiveTopNShouldBeOk" time="0"/>
  <testcase classname="storm.starter.bolt.TotalRankingsBoltTest" name="positiveTopNShouldBeOk" time="0"/>
  <testcase classname="storm.starter.bolt.TotalRankingsBoltTest" name="shouldDeclareOutputFields" time="0"/>
  <testcase classname="storm.starter.bolt.TotalRankingsBoltTest" name="shouldEmitNothingIfNormalTupleIsReceived" time="0.012"/>
  <testcase classname="storm.starter.bolt.TotalRankingsBoltTest" name="shouldEmitSomethingIfTickTupleIsReceived" time="0.001"/>
  <testcase classname="storm.starter.bolt.TotalRankingsBoltTest" name="shouldSetTickTupleFrequencyInComponentConfigurationToNonZeroValue" time="0"/>
</testsuite>